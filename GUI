    Label labelName = new Label("Name");
    Label labelMessages = new Label("Compose ");
    Label labelReceived = new Label("Messages");
    Label labelTitle = new Label();
    Label labelActiveUser = new Label("Active User");
    Label errorLabel = new Label("");

    
    ArrayList<String> userList = new ArrayList<>();
    ArrayList<String> chatMessages = new ArrayList<>();

    
    ListView<String> userListView = new ListView<String>();
    ListView<String> messageListView = new ListView<String>();

   
    ObservableList<String> userItems =
            FXCollections.observableArrayList (userList);

    ObservableList<String> messageItem =
            FXCollections.observableArrayList (chatMessages);


    
    TextField tfName = new TextField();
    TextArea taComposeMessage = new TextArea();

    
    Button btJoin = new Button("Join");
    Button btSend = new Button("Send");
    Button btDisconnect = new Button("Exit");

    
    DataOutputStream dataOutputStream;
    DataInputStream dataInputStream;

    
    boolean joined = false;

    //Socket is declared.
    private Socket socket;

    // User name is being used in various methods.
    private String userName;

    private boolean connection = true;









    public void start(Stage primaryStage)  {

        
        BorderPane borderPane = new BorderPane();
        borderPane.setPadding(new Insets(10));

        //Setting Title of the application
        Font titleFont = new Font("Arial Rounded MT",20);
        labelTitle.setText("Lockdown Chat");
        labelTitle.setFont(titleFont);
        Color titleColor = new Color(0.1, 0, 0.5,1);
        labelTitle.setTextFill(titleColor);


        // Setting Prompt for user text field and area.
        tfName.setPromptText("Enter User Name");
        taComposeMessage.setPromptText("Enter your Message");

        // Setting size of the compose text area. So, user can send
        // multiline messages.
        taComposeMessage.setPrefHeight(2*(tfName.getHeight()));
        taComposeMessage.setPrefWidth(250);

        // Creating GridPane for the Center part of BorderPane.
        GridPane centreGridPane = new GridPane();
        centreGridPane.setPadding(new Insets(10));
        centreGridPane.setHgap(20);
        centreGridPane.setVgap(10);

        // Adding item to the centreGridPane
        centreGridPane.add(labelName,0,0);
        centreGridPane.add(tfName,1,0);
        centreGridPane.add(btJoin,2,0);
        centreGridPane.add(labelReceived,0,2);
        centreGridPane.add(errorLabel,1,1,2,1);
        centreGridPane.add(messageListView,1,2,2,1);

        //Setting content to display for the ListVIew
        messageListView.setItems(messageItem);
        userListView.setItems(userItems);

        // user and message list view is made uneditable.
        userListView.setEditable(false);
        messageListView.setEditable(false);

        // Setting size of user ListView.
        userListView.setMaxWidth(180);
        userListView.setMaxHeight(250);


        
        VBox rightVBox = new VBox();
        rightVBox.setPadding(new Insets(20,0,10,0));
        rightVBox.setSpacing(10);
        rightVBox.getChildren().addAll(labelActiveUser,userListView);
        borderPane.setRight(rightVBox);


        //Creating and adding note to bottomGridPane.
        GridPane bottomGridPane = new GridPane();
        bottomGridPane.add(labelMessages,0,0);
        bottomGridPane.add(taComposeMessage,1,0);
        bottomGridPane.add(btSend,4,0);
        bottomGridPane.add(btDisconnect,7,0);
        bottomGridPane.setHgap(20);
        bottomGridPane.setPadding(new Insets(10,0,10,10));
        btSend.setAlignment(Pos.BASELINE_RIGHT);

        //Adding item to the Top of BorderPane
        borderPane.setTop(labelTitle);
        borderPane.setAlignment(labelTitle,Pos.CENTER);

        //Adding item to the Center of BorderPane
        borderPane.setCenter(centreGridPane);

        
        borderPane.setBottom(bottomGridPane);

        
        Scene scene = new Scene(borderPane,580,400);
        primaryStage.setScene(scene); //Setting scene.
        primaryStage.setTitle("Welcome to Lockdown Chat");
        primaryStage.show();   

        
        primaryStage.setOnCloseRequest(t -> closeSocketExit());
        //Send is disable until username is accepted.
        btSend.setDisable(true);

        // Setting listener for the buttons.
        btJoin.setOnAction(event -> joinChat());
        btSend.setOnAction(e -> process());
        btDisconnect.setOnAction(event -> closeSocketExit());

        try {
            // Create a socket to connect to the server
            socket = new Socket("localhost", 600);

            // Create an input stream to receive data from server.
            dataInputStream =
                    new DataInputStream(socket.getInputStream());

            // Create an output stream to send data to the server
            dataOutputStream =
                    new DataOutputStream(socket.getOutputStream());

            // Start a new thread for receiving messages
            new Thread(() -> receiveMessages()).start();
        }
        
        catch (IOException ex) {
            errorLabel.setTextFill(Color.RED);
            errorLabel.setText("Unable to establish connection.");
            System.err.println("Connection refused.");
        }
    }
